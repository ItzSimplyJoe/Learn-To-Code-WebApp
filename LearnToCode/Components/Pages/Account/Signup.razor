@page "/Signup"
@using DeveloperHub.ViewModels

<NavMenu />
<div class="flex py-24 w-full lg:h-screen justify-center items-center overflow-x-hidden">
    <div class="max-w-screen-xl flex h-full shadow-md w-full">
        <div class="flex-1 flex items-center justify-center bg-white h-full rounded-l-lg p-6 overflow-y-auto scrollbar-thin scrollbar-thumb-rounded-lg scrollbar-track-white scrollbar-thumb-gray-400">
            <div class="max-w-md w-full">
                <h2 class="text-3xl font-bold text-gray-900 mb-2">Create your account</h2>
                <p class="text-sm text-gray-600 mb-6">
                    Already a member? <a href="/Login" class="text-indigo-600">
                        Sign in now!
                    </a>
                </p>
                <EditForm Model="@Model" OnValidSubmit="@SubmitFormAsync" FormName="SignUpForm">
                    <div class="flex flex-col gap-2 md:gap-6 w-full">
                        <div class="w-full flex flex-col md:flex-row gap-2">
                            <div class="w-full flex flex-col">
                                <label for="firstName" class="sr-only">First Name</label>
                                <InputText @bind-Value="Model.FirstName" id="firstName" name="firstName"
                                           class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                           placeholder="First Name *" />
                            </div>
                            <div class="w-full flex flex-col">
                                <label for="lastName" class="sr-only">Last Name</label>
                                <InputText @bind-Value="Model.LastName" id="lastName" name="lastName"
                                           class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                           placeholder="Last Name *" />
                            </div>
                        </div>

                        <div class="flex flex-col">
                            <label for="email" class="sr-only">Email address</label>
                            <InputText @bind-Value="Model.Email" id="email" name="email" type="email"
                                       autocomplete="email"
                                       class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                       placeholder="Email address *" />
                        </div>
                        <div class="flex flex-col">
                            <label for="password" class="sr-only">Password</label>
                            <InputText @bind-Value="Model.Password" id="password" name="password" type="password"
                                       autocomplete="current-password"
                                       class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                       placeholder="Password *" />
                        </div>
                        <div class="flex flex-col">
                            <label for="confirmPassword" class="sr-only">Confirm Password</label>
                            <InputText @bind-Value="Model.ConfirmPassword" id="confirmPassword"
                                       type="password"
                                       class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                       placeholder="Confirm Password *" />
                        </div>

                        <div class="w-full flex flex-col md:flex-row gap-2">
                            <div class="w-full flex flex-col">
                                <label for="phoneNumber" class="sr-only">Phone Number</label>
                                <InputText @bind-Value="Model.PhoneNumber" id="phoneNumber" name="phoneNumber"
                                           class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                           placeholder="Phone Number *" />
                            </div>
                            <div class="w-full flex flex-col">
                                <label for="address" class="sr-only">Address</label>
                                <InputText @bind-Value="Model.Address" id="address" name="address"
                                           class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                           placeholder="Address *" />
                            </div>
                        </div>
                        <div class="w-full flex flex-col md:flex-row gap-2">
                            <div class="w-full flex flex-col">
                                <label for="city" class="sr-only">City</label>
                                <InputText @bind-Value="Model.City" id="city" name="city"
                                           class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                           placeholder="City *" />
                            </div>
                            <div class="w-full flex flex-col">
                                <label for="country" class="sr-only">Country</label>
                                <InputText @bind-Value="Model.Country" id="country" name="country"
                                           class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                           placeholder="Country" />
                            </div>
                        </div>
                        <div class="w-full flex flex-col md:flex-row gap-2">
                            <div class="w-full flex flex-col">
                                <label for="postalCode" class="sr-only">Postal Code</label>
                                <InputText @bind-Value="Model.PostalCode" id="postalCode" name="postalCode"
                                           class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                           placeholder="Postal Code" />
                            </div>
                            <div class="w-full flex flex-col">
                                <label for="organisation" class="sr-only">Organisation</label>
                                <InputText @bind-Value="Model.Organisation" id="organisation" name="organisation"
                                           class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                           placeholder="Organisation" />
                            </div>
                        </div>
                        <div class="w-full flex flex-col md:flex-row gap-2">
                            <div class="w-full flex flex-col">
                                <label for="role" class="sr-only">Role</label>
                                <InputText @bind-Value="Model.Role" id="role" name="role"
                                           class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                           placeholder="Role" />
                            </div>
                            <div class="w-full flex flex-col">
                                <label for="department" class="sr-only">Department</label>
                                <InputText @bind-Value="Model.Department" id="department" name="department"
                                           class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                           placeholder="Department" />
                            </div>
                        </div>
                        <div class="w-full flex flex-col md:flex-row gap-2">
                            <div class="w-full flex flex-col">
                                <label for="birthday" class="sr-only">Birthday</label>
                                <InputDate @bind-Value="Model.Birthday" id="birthday" name="birthday"
                                           class="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                                           placeholder="Birthday" />
                            </div>
                        </div>
                    </div>

                    @if (_errorMessage != null)
                    {
                        <div class="text-red-600 text-sm mt-2">
                            @_errorMessage
                        </div>
                    }

                    <div class="flex w-full flex-col gap-4 mt-8">
                        <button type="submit" class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Sign up
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
        <div class="h-full flex-1 hidden lg:flex relative items-center justify-center">
            <div class="hidden sm:absolute sm:-top-10 sm:right-1/2 sm:-z-10 sm:mr-10 sm:block sm:transform-gpu sm:blur-3xl" aria-hidden="true">
                <div class="aspect-[1097/845] w-[68.5625rem] bg-gradient-to-tr from-[#ff4694] to-[#776fff] opacity-20" style="clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)"></div>
            </div>
            <div class="absolute -top-52 left-1/2 -z-10 -translate-x-1/2 transform-gpu blur-3xl sm:top-[-28rem] sm:ml-16 sm:translate-x-0 sm:transform-gpu" aria-hidden="true">
                <div class="aspect-[1097/845] w-[68.5625rem] bg-gradient-to-tr from-[#ff4694] to-[#776fff] opacity-20" style="clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)"></div>
            </div>
            <div class="absolute inset-0 w-full h-full">
                <img src="/Images/codingImage.jpg" alt="Image" class="object-cover object-center w-full h-full">
            </div>
        </div>
    </div>
</div>

@code
{
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private SignupViewModel Model { get; set; } = new();

    private string? _errorMessage;

    private async Task SubmitFormAsync()
    {
        if (string.IsNullOrWhiteSpace(Model.Email))
        {
            _errorMessage = "Email is required";
            return;
        }

        if (string.IsNullOrWhiteSpace(Model.Password))
        {
            _errorMessage = "Password is required";
            return;
        }

        if (string.IsNullOrWhiteSpace(Model.ConfirmPassword))
        {
            _errorMessage = "Confirm Password is required";
            return;
        }

        if (Model.Password != Model.ConfirmPassword)
        {
            _errorMessage = "Passwords do not match";
            return;
        }

        if (!PasswordValidator.ValidatePassword(Model.Password))
        {
            _errorMessage = "Password must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one digit, and one special character";
            return;
        }

        if (string.IsNullOrWhiteSpace(Model.FirstName))
        {
            _errorMessage = "First Name is required";
            return;
        }

        if (string.IsNullOrWhiteSpace(Model.LastName))
        {
            _errorMessage = "Last Name is required";
            return;
        }

        await ConfirmSignupAsync().ConfigureAwait(false);
    }


    public static class PasswordValidator
    {
        public static bool ValidatePassword(string password)
        {
            if (password.Length < 8)
            {
                return false;
            }

            if (!password.Any(char.IsUpper))
            {
                return false;
            }

            if (!password.Any(char.IsLower))
            {
                return false;
            }

            return password.Any(char.IsDigit) && password.Any(IsSpecialCharacter);
        }

        private static bool IsSpecialCharacter(char c)
        {
            return !char.IsLetterOrDigit(c);
        }
    }
}
