@page "/Account"
@using TimeZone = DeveloperHub.Components.Pages.Account.AccountEnums.TimeZone
@using DeveloperHub.Components.Pages.Account.AccountEnums
@using DeveloperHub.ViewModels
@using BlazorInputFile
@using Microsoft.AspNetCore.Mvc
@if (User == null)
{
    <p>Loading...</p>
}
else
{
    <div class="w-full h-full bg-grey-200 flex flex-row">

        <Sidebar />

        <div class="gap-6 p-6 w-full">

            <div class="w-full">
                <h2 class="text-gray-900 font-semibold text-3xl">
                    User Settings
                </h2>
            </div>
            <div class="flex flex-col lg:flex-row gap-6 w-full">
                <div class="w-full lg:w-1/2 flex flex-col gap-6">
                    @*
                        Profile Picture & Name
                    *@
                    <div class="bg-white w-full shadow-md rounded-lg gap-4 p-8 justify-start items-center flex flex-col md:flex-row">
                        @if (_photoURL != null)
                        {
                            <img src="@_photoURL" alt="Profile Picture" class="w-24 h-24 rounded-full" />
                        }
                        else
                        {
                            <div class="w-24 h-24 flex justify-center items-center bg-red-200 rounded-full text-3xl font-bold">
                                JB
                            </div>
                        }

                        <div class="flex flex-col gap-2">
                            <h3 class="text-gray-800 font-semibold text-2xl">Joe Bostock</h3>
                            <p class="text-gray-500 text-xl">Developer</p>
                            <BlazorInputFile.InputFile class="file:bg-blue-500 file:hover:bg-blue-700 file:text-white file:font-bold file:py-2 file:px-4 file:rounded-lg" id="image-picker" OnChange="@HandlePhotoSelected" accept="image/*" />
                            @if (_errorMessagePFP != null)
                            {
                                <div class="text-red-600 text-sm mt-2">
                                    @_errorMessagePFP
                                </div>
                            }
                            <button @onclick="@(UpdateProfilePictureAsync)" class="bg-blue-500 hover:bg-blue-700 text-white le:font-bold py-2 px-4 rounded-lg">
                                Change PFP
                            </button>
                        </div>
                    </div>

                    @*
                        Language & Timezone
                    *@
                    <div class="bg-white w-full shadow-md rounded-lg gap-6 p-8 justify-start items-start flex flex-col">
                        <h4 class="font-semibold text-2xl w-full">
                            Language & Timezone
                        </h4>

                        <EditForm Model="@DateTimeViewModel" OnValidSubmit="UpdateLanguageAndTime" class="flex flex-col gap-6 w-full">
                            <div class="flex flex-row gap-4 w-full justify-center items-center">
                                <label for="language" class="text-gray-800 font-semibold text-xl">Language</label>
                                <select @bind="@DateTimeViewModel.Language" name="language" id="language" class="p-2 rounded-lg bg-gray-100 border border-gray-400 p-2 w-full">
                                    @foreach (var language in Enum.GetValues(typeof(Language)))
                                    {
                                        <option value="@language">@language.ToString()</option>
                                    }
                                </select>
                            </div>
                            <div class="flex flex-row gap-4 w-full justify-center items-center">
                                <label for="timezone" class="text-gray-800 font-semibold text-xl">Timezone</label>
                                <select @bind="@DateTimeViewModel.TimeZone" name="timezone" id="timezone" class="p-2 rounded-lg bg-gray-100 border border-gray-400 p-2 w-full">
                                    @foreach (var timezone in Enum.GetValues(typeof(TimeZone)))
                                    {
                                        <option value="@timezone">@timezone.ToString()</option>
                                    }
                                </select>
                            </div>
                            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">
                                Save Settings
                            </button>
                        </EditForm>
                    </div>

                    @*
                        Friends Accounts
                    *@
                    <div class="bg-white w-full shadow-md rounded-lg gap-6 p-8 justify-start items-start flex flex-col">
                        <h4 class="font-semibold text-2xl w-full">
                            Friends
                        </h4>

                        <div class="flex flex-col gap-6 divide-y divide-gray-200 w-full">
                            <div class="flex flex-row justify-between items-center w-full">
                                <div class="flex items-center w-full">
                                    <div class="relative w-full">
                                        <input type="text" placeholder="Search friends" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full pl-10" />
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-6 w-6 text-gray-400">
                                                <path fill="currentColor" d="M21.71 20.29l-5.32-5.32A7.93 7.93 0 0 0 18 10a8 8 0 1 0-8 8c1.73 0 3.31-.55 4.62-1.47l5.32 5.32a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42zM4 10a6 6 0 1 1 6 6 6 6 0 0 1-6-6z"/>
                                            </svg>
                                        </div>
                                    </div>
                                    <button class="bg-grey-200 shadow-md rounded-full h-10 w-10 flex items-center justify-center ml-2">
                                        <span class="text-gray-800 font-bold text-xl">+</span>
                                    </button>
                                </div>
                            </div>
                            <div class="flex flex-row justify-between items-center w-full py-2 gap-4">
                                <div class="min-w-10 max-w-10 h-10 flex justify-center items-center bg-blue-200 rounded-full text-xl font-semibold">
                                    JD
                                </div>
                                <div class="flex flex-col w-full">
                                    <h4>John Doe</h4>
                                    <a href="#" class="text-blue-400 hover:underline hover:underline-offset-2">Last seen: 2 min ago...</a>
                                </div>
                                <button class="border border-gray-600 hover:bg-gray-100 text-gray-600 font-bold py-2 px-4 rounded-lg">
                                    Remove
                                </button>
                            </div>
                            <div class="flex flex-row justify-between items-center w-full py-2 gap-4">
                                <div class="min-w-10 max-w-10 h-10 flex justify-center items-center bg-green-200 rounded-full text-xl font-semibold">
                                    PB
                                </div>
                                <div class="flex flex-col w-full">
                                    <h4>Peanut Butter</h4>
                                    <a href="#" class="text-blue-400 hover:underline hover:underline-offset-2">Last seen: 3 days ago...</a>
                                </div>
                                <button class="border border-gray-600 hover:bg-gray-100 text-gray-600 font-bold py-2 px-4 rounded-lg">
                                    Remove
                                </button>
                            </div>
                        </div>
                        <div class="flex flex-col md:flex-row justify-between mt-4 w-full gap-2">
                            <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">
                                Save Settings
                            </button>

                            <button class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" class="h-6 w-6 rounded-full fill-white">
                                    <path fill="currentColor" d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z"/>
                                </svg>
                                Add Friend
                            </button>
                        </div>
                    </div>

                    @*
                        Social Media Accounts
                    *@
                    <div class="bg-white w-full shadow-md rounded-lg gap-6 p-8 justify-start items-start flex flex-col">
                        <h4 class="font-semibold text-2xl w-full">
                            Social accounts
                        </h4>

                        <div class="flex flex-col gap-6 divide-y divide-gray-200 w-full">
                            <div class="flex flex-row justify-between items-center w-full py-2 gap-4 h-full">
                                <div class="w-10 h-10">
                                    <img src="Images/Icons/github.svg" class="min-w-10 max-w-10 h-10" alt="Social Logo" />
                                </div>
                                <div class="flex flex-col w-full">
                                    <h4>Github account</h4>
                                    <a href="#" class="text-blue-400 hover:underline hover:underline-offset-2">www.github.com/ItzSimplyJoe</a>
                                </div>
                                <button class="border border-gray-600 hover:bg-gray-100 text-gray-600 font-bold py-2 px-4 rounded-lg">
                                    Disconnect
                                </button>
                            </div>
                            <div class="flex flex-row justify-between items-center w-full py-2 gap-4 items-center h-full">
                                <div class="w-10 h-10">
                                    <img src="Images/Icons/github.svg" class="min-w-10 max-w-10 h-10" alt="Social Logo" />
                                </div>
                                <div class="flex flex-col w-full">
                                    <h4>Github account</h4>
                                    <span class="text-gray-600">Not connected</span>
                                </div>
                                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">
                                    Connect
                                </button>
                            </div>
                        </div>
                        <div class="flex flex-col md:flex-row justify-between mt-4 w-full gap-2">
                            <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">
                                Save Settings
                            </button>

                            <button class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" class="h-6 w-6 rounded-full fill-white">
                                    <path fill="currentColor" d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z" />
                                </svg>
                                New social account
                            </button>
                        </div>
                    </div>
                </div>
                <div class="w-full flex flex-col gap-6">
                    @*
                        User Details
                    *@
                    <EditForm Model="@UserSettingsModel" FormName="User Details" OnValidSubmit="SubmitUserDetailsAsync" class="bg-white w-full shadow-md rounded-lg gap-4 p-8 justify-start items-start flex flex-col">
                        <DataAnnotationsValidator/>
                        <div class="w-full">
                            <h4 class="font-semibold text-2xl w-full">
                                User Details
                            </h4>
                        </div>
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 w-full">
                            <div class="flex flex-col gap-2">
                                <label for="firstName" class="text-gray-800 font-semibold text-md">First Name</label>
                                <InputText @bind-Value="UserSettingsModel.FirstName" type="text" id="firstName" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your first name" />
                            </div>

                            <div class="flex flex-col gap-2">
                                <label for="lastName" class="text-gray-800 font-semibold text-md">Last Name</label>
                                <InputText @bind-Value="UserSettingsModel.LastName" type="text" id="lastName" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your last name" />
                            </div>

                            <div class="flex flex-col gap-2">
                                <label for="country" class="text-gray-800 font-semibold text-md">Country</label>
                                <InputText @bind-Value="UserSettingsModel.Country" type="text" id="country" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your country" />
                            </div>

                            <div class="flex flex-col gap-2">
                                <label for="city" class="text-gray-800 font-semibold text-md">City</label>
                                <InputText @bind-Value="UserSettingsModel.City" id="city" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your city" />
                            </div>

                            <div class="flex flex-col gap-2">
                                <label for="address" class="text-gray-800 font-semibold text-md">Address</label>
                                <InputText @bind-Value="UserSettingsModel.Address" id="address" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your address" />
                            </div>

                            <div class="flex flex-col gap-2">
                                <label for="email" class="text-gray-800 font-semibold text-md">Email</label>
                                <InputText @bind-Value="UserSettingsModel.Email" id="email" type="Email" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your email" />
                            </div>

                            <div class="flex flex-col gap-2">
                                <label for="phone" class="text-gray-800 font-semibold text-md">Phone Number</label>
                                <InputText @bind-Value="UserSettingsModel.PhoneNumber" type="tel" id="phone" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your phone number" />
                            </div>

                            <div class="flex flex-col gap-2">
                                <label for="birthday" class="text-gray-800 font-semibold text-md">Birthday</label>
                                <InputDate @bind-Value="UserSettingsModel.Birthday" id="birthday" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" />
                            </div>

                            <div class="flex flex-col gap-2">
                                <label for="organisation" class="text-gray-800 font-semibold text-md">Organisation</label>
                                <InputText @bind-Value="UserSettingsModel.Organisation" type="text" id="organisation" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your organisation" />
                            </div>

                            <div class="flex flex-col gap-2">
                                <label for="role" class="text-gray-800 font-semibold text-md">Role</label>
                                <InputText @bind-Value="UserSettingsModel.Role" type="text" id="role" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your role" />
                            </div>

                            <div class="flex flex-col gap-2">
                                <label for="department" class="text-gray-800 font-semibold text-md">Department</label>
                                <InputText @bind-Value="UserSettingsModel.Department" type="text" id="department" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your department" />
                            </div>

                            <div class="flex flex-col gap-2">
                                <label for="zip" class="text-gray-800 font-semibold text-md">Zip/Postal Code</label>
                                <InputText @bind-Value="UserSettingsModel.PostalCode" type="text" id="zip" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your zip/postal code" />
                            </div>
                        </div>
                        @if (_errorMessageUserSettings != null)
                        {
                            <div class="text-red-600 text-sm mt-2">
                                @_errorMessageUserSettings
                            </div>
                        }
                        <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">
                            Save Settings
                        </button>
                    </EditForm>
                    @*
                        Password Section
                    *@
                    <div class="bg-white w-full shadow-md rounded-lg gap-4 p-8 justify-start items-start flex flex-col">
                        <div class="w-full">
                            <h4 class="font-semibold text-2xl w-full">
                                Password
                            </h4>
                        </div>
                        <div class="flex flex-col gap-2 w-full">
                            <label for="currentPassword" class="text-gray-800 font-semibold text-md">Current Password</label>
                            <input type="password" id="currentPassword" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your current password" />
                        </div>
                        <div class="flex flex-col lg:flex-row gap-6 w-full">
                            <div class="flex flex-col gap-2 w-full">
                                <label for="newPassword" class="text-gray-800 font-semibold text-md">New Password</label>
                                <input type="password" id="newPassword" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Enter your new password" />
                            </div>
                            <div class="flex flex-col gap-2 w-full">
                                <label for="confirmPassword" class="text-gray-800 font-semibold text-md">Confirm Password</label>
                                <input type="password" id="confirmPassword" class="p-2 rounded-lg bg-gray-100 border border-gray-400 w-full" placeholder="Confirm your new password" />
                            </div>
                        </div>
                        <div class="text-gray-600 text-sm">
                            <span class="font-semibold">Password requirements:</span>
                            <ul class="list-disc list-inside">
                                <li>At least 8 characters</li>
                                <li>At least one uppercase letter</li>
                                <li>At least one lowercase letter</li>
                                <li>At least one number</li>
                                <li>At least one special character</li>
                            </ul>
                        </div>
                        @if (_errorMessagePassword != null)
                        {
                            <div class="text-red-600 text-sm mt-2">
                                @_errorMessagePassword
                            </div>
                        }
                        <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">
                            Save Settings
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code{
    private string? _errorMessageUserSettings;
    private string? _errorMessagePassword;
    private string? _errorMessagePFP;
    private string? _photoURL;
    
    [SupplyParameterFromForm]
    public UserSettingsModel UserSettingsModel { get; set; } = new();

    [SupplyParameterFromForm]
    public PasswordUpdateModel PasswordUpdateModel { get; set; } = new();

    [SupplyParameterFromForm]
    public DateTimeViewModel DateTimeViewModel { get; set; } = new();

    [IgnoreAntiforgeryToken]
    public async Task SubmitUserDetailsAsync()
    {
        if (string.IsNullOrWhiteSpace(UserSettingsModel.Email))
        {
            _errorMessageUserSettings = "Email is required";
            return;
        }

        if (string.IsNullOrWhiteSpace(UserSettingsModel.FirstName))
        {
            _errorMessageUserSettings = "First Name is required";
            return;
        }

        if (string.IsNullOrWhiteSpace(UserSettingsModel.LastName))
        {
            _errorMessageUserSettings = "Last Name is required";
            return;
        }

        await UpdateUserDetails().ConfigureAwait(false);
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    [IgnoreAntiforgeryToken]
    public async Task UpdatePasswordAsync()
    {
        if (string.IsNullOrWhiteSpace(PasswordUpdateModel.OldPassword))
        {
            _errorMessagePassword = "Old password is required";
            return;
        }

        if (string.IsNullOrWhiteSpace(PasswordUpdateModel.NewPassword))
        {
            _errorMessagePassword = "New password is required";
            return;
        }
        if (string.IsNullOrWhiteSpace(PasswordUpdateModel.ConfirmPassword))
        {
            _errorMessagePassword = "Confirm Password is required";
            return;
        }

        if (PasswordUpdateModel.NewPassword != PasswordUpdateModel.ConfirmPassword)
        {
            _errorMessagePassword = "Passwords do not match";
            return;
        }

        if (!PasswordValidator.ValidatePassword(PasswordUpdateModel.NewPassword))
        {
            _errorMessagePassword = "Password must be at least 8 characters long, contain at least one uppercase letter, one lowercase letter, one digit, and one special character";
            return;
        }

        await UpdatePassword().ConfigureAwait(false);
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    public async Task HandlePhotoSelected(IFileListEntry[] files)
    {
        try
        {
            var file = files.FirstOrDefault();
            if (file != null)
            {
                var imageFile = await file.ToImageFileAsync("image/jpeg", 800, 600);
                var bytes = await imageFile.ReadAllAsync();
                _photoURL = bytes.ToDataUrl("image/jpeg");
                await InvokeAsync(StateHasChanged).ConfigureAwait(false);
            }
        }
        catch (Exception ex)
        {
            _errorMessagePFP = $"Error uploading image: {ex.Message}";
        }
    }

    [IgnoreAntiforgeryToken]
    public async Task UpdateLanguageAndTime()
    {
        await UpdateTimeAndLanguage().ConfigureAwait(false);
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }
}
